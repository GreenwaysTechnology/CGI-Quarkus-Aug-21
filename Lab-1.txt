
Lab 1 : create REST api for the following urls

http://example.com/api/orders
http://example.com/api/orders/{orderId}
http://example.com/api/orders/{orderId}/items
http://example.com/api/orders/{orderId}/items/{itemId}

Lab 2: Create REST API based on the below url


Final Url , must be numbers 
max length 5
min length 3

http://localhost:8080/users/finders/12345 - max 5
http://localhost:8080/users/finders/123  -min 3


invalid
http://localhost:8080/users/finders/12
http://localhost:8080/users/finders/123456

Design Path based on the above req.

Lab 3: Design Url for the given URI

"/aaa111bbb"
"/bill-02115"
"foobill-02115bar"

Week 3:
Lab:4
 Create RESTFull api for the following Resources and write CURD operations using
ArrayList(Immmemory Representation)

/users - findAll Users
/users/create - post use new user
/users/{id} - findBy User
/users/{id} - delete users
/users/{id} - Update Users

Req:
- Should return responses using response builder
- Should implement the Execption for all apis - could be biz exceptions 
   lets say if you find users by id , if id does not find, you have to send Response 
  that user not found
-Api should have implemented content-negotation - json and xml
-Should have used Resource and SubResource concept.

Lab 5:
 
 Create RESTFull api for the following Resources and write CURD operations using
ArrayList(Immmemory Representation)  With Service implementation using cdi

/users - findAll Users
/users/create - post use new user
/users/{id} - findBy User
/users/{id} - delete users
/users/{id} - Update Users

Req:

- Should create User Service
- Should create User repository,which should have array operations
- Should  inject repository into service 
- Should inject service into Resources
-Should call api from Resource to api
- Should return responses using response builder
- Should implement the Execption for all apis - could be biz exceptions 
   lets say if you find users by id , if id does not find, you have to send Response 
  that user not found
-Api should have implemented content-negotation - json and xml
-Should have used Resource and SubResource concept.
.............................................................................................

Lab 6: Using Rest Client:

Build Two App.

1.Event App
   - should have all curd operations jpa-hibernate-panche - using h2/postgre/mysql
 should run in port 3000

build this app 
java -jar target/....
 
2.Authors App
- should have all curd operations jpa-hibernate-panche - using h2/postgre/mysql
  should run in port 3001

java -jar target/....
 

3.EventManagementApp

  Query information from Event app
  Query Information fro  Authors app
 should run in port 8080

events/rest/v1/list

java -jar target/....
 












